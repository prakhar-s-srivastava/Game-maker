#include"Export.h"
#include"json.hpp"

using  json::JSON;

bool ExportScene()
{
    JSON objects;
    JSON materials;
    JSON textures;
    JSON exportJson;
    mkdir("Export");
    FILE *exportFIle;
    exportFIle=fopen("Export/exportFile.json","w");
    if(exportFIle == NULL){puts("Cant Open");}
    {
        exportJson["objectList-size"] = SceneObjects.size();
        for(int it =0;it<SceneObjects.size();it++)
        {
            objects[it]["name"] =SceneObjects[it]->RepresentngObject.Name;
            objects[it]["type"] = (int)SceneObjects[it]->Type;
            objects[it]["source"] = SceneObjects[it]->RepresentngObject.Name != ""?getFileName(SceneObjects[it]->RepresentngObject.getsourceFile().c_str()):"none";
            mkdir("Export/Resources");
            FILE *sourceFile = fopen(SceneObjects[it]->RepresentngObject.getsourceFile().c_str(),"r");
            if(sourceFile !=NULL)
            {
                std::string newsourcelocation = "Export/Resources/"+std::string(getFileName(SceneObjects[it]->RepresentngObject.getsourceFile().c_str()));
                 FILE *newSourceFIle =fopen(newsourcelocation.c_str(),"r");
                 if(newSourceFIle ==NULL){
               newSourceFIle= fopen(newsourcelocation.c_str(),"w");
                while(!feof(sourceFile))
                {
                       char  c = fgetc(sourceFile);
                       if(feof(sourceFile))break;
                       fputc(c,newSourceFIle);
                }
                 }
                fclose(newSourceFIle);
            }
                fclose(sourceFile);                                                                                 //copied source file*


            objects[it]["position"] = json::Array(getPosition(SceneObjects[it]).x,getPosition(SceneObjects[it]).y,getPosition(SceneObjects[it]).z);
            objects[it]["rotation"] = json::Array(getRotation(SceneObjects[it]).x,getRotation(SceneObjects[it]).y,getRotation(SceneObjects[it]).z);
            objects[it]["scale"] = json::Array(getScale(SceneObjects[it]).x,getScale(SceneObjects[it]).y,getScale(SceneObjects[it]).z);
            objects[it]["material"] =SceneObjects[it]->RepresentngObject.mat->Name;




        }

        exportJson["materialList-size"] = MaterialList.size();
        for(int it =0;it<MaterialList.size();it++)
        {
            materials[it]["name"] = MaterialList[it]->Name;
            materials[it]["vertex-shader"] = MaterialList[it]->VertexShader;
            materials[it]["fragmnet-shader"] = MaterialList[it]->FragmentShader;
            materials[it]["color"] = json::Array(MaterialList[it]->color.x,MaterialList[it]->color.y,MaterialList[it]->color.z );
            materials[it]["texture"] = MaterialList[it]->texture != NULL? MaterialList[it]->texture->Name:"";
        }

        exportJson["textureList-size"] = TextureList.size();
        for(int it =0;it<TextureList.size();it++)
        {
                textures[it]["name"] = TextureList[it]->Name;
                textures[it]["source"]=TextureList[it]->getLocation();

        }

        exportJson["textures"]= textures;
        exportJson["objects"] = objects;
        exportJson["materials"] = materials;
    }

    fputs(exportJson.dump().c_str(),exportFIle);
    fclose(exportFIle);

    std::cout<<exportJson<<std::endl;
}


bool ImportScene(std::string filelocation)
 {

    FILE *jsonFile = fopen(filelocation.c_str(),"r");
    char  data[4096] ={'\0'};

    while (!feof(jsonFile))
    {
        char c[2]={'\0'};
         c[0]= fgetc(jsonFile);
        if(feof(jsonFile)) break;
        strcat(data,c);

    }
    std::cout <<data<<std::endl;

    JSON importJson =JSON::Load(std::string(data));
    JSON numObjects,numMaterials,numTextures;
    numObjects = importJson["objectList-size"];
    numMaterials = importJson["materialList-size"];
    numTextures = importJson["textureList-size"];
    for(int it =0;it<numObjects.ToInt();it++)
    {
        addObject( importJson["objects"][it]["name"].ToString(),
                  "Export/Resources/"+std::string(getFileName(SceneObjects[it]->RepresentngObject.getsourceFile().c_str())));
        setPosition(SceneObjects.back(),importJson["objects"][it]["position"][0].ToFloat(),importJson["objects"][it]["position"][1].
                    ToFloat(),importJson["objects"][it]["position"][2   ].ToFloat());

    }





    return true;
 }
